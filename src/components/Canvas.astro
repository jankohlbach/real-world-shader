<script>
  import type { PlaneParams } from 'curtainsjs';

  import { Curtains, Plane } from 'curtainsjs';

  import { lenis } from '../scripts/scroll';
  import vertexShader from '../shader/vertex.glsl';
  import fragmentShader from '../shader/fragment.glsl';

  window.addEventListener('load', () => {
    const planes = [];

    const curtains = new Curtains({
      container: document.querySelector('[data-js="canvas"]') || undefined,
      pixelRatio: Math.min(2, window.devicePixelRatio),
      watchScroll: false,
    });

    curtains
      .onError(() => {
        document.body.classList.add('no-curtains');
      })
      .onContextLost(() => {
        curtains.restoreContext();
      });

    const planeElements = document.querySelectorAll('[data-canvas]');

    const params: PlaneParams = {
      vertexShader,
      fragmentShader,
      widthSegments: 100,
      heightSegments: 100,
      transparent: true,
      uniforms: {
        time: {
          name: 'uTime',
          type: '1f',
          value: 0.0,
        },
      },
    };

    planeElements.forEach((planeElement) => {
      const plane = new Plane(curtains, planeElement, params);
      planes.push(plane);

      plane.onRender(() => {
        plane.uniforms.time.value = (plane.uniforms.time.value as number) + 1;
      });
    });

    // TODO: pause rendering when not scrolling?
    // TODO: don't update planes when not in view?

    lenis.on('scroll', () => {
      curtains.updateScrollValues(window.scrollX, window.scrollY);
    });
  });
</script>

<div class="canvas" data-js="canvas"></div>

<style lang="scss">
  .canvas {
    position: fixed;
    inset: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
</style>
